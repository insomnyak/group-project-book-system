openapi: 3.0.0
info:
  title: Book System Service
  description: A simple service that allows CRUD operations for a book system that stores books and respective book notes.
  version: 0.0.1
servers: 
  - url: 'http://localhost:9100'
    description: config server
  - url: 'http://localhost:8761'
    description: Eureka server
  - url: 'http://localhost:4242'
    description: book service
  - url: 'http://localhost:1984'
    description: note service

# Basic CRUD Book
paths:
  /books:
    post:
      summary: Creates a new Book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: A Book object and list of notes (if applicable).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid request syntax.
        '422':
          description: Incomplete Book information. Some required fields missing.
    get:
      summary: Retrieves all Book entries.
      responses:
        '200':
          description: A list of all Book entries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Books'
  /books/{id}:
    get:
      summary: Retrieves the entry for the Book by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Book you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Book object matching given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book with given ID not found.
          
    delete:
      summary: Deletes the entry for the Book by ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: ID of the Book you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Book successfully deleted.
        '404':
          description: Book with given ID not found.
    put:
      summary: Updates the entry for the Book by ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: ID of the Book you would like to update.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book successfully updated.
        '404':
          description: Book with given ID not found.
        '422':
          description: Book ID on path must match the ID in the Book object.
components:
  schemas:
    Book:
      properties:
        bookId:
          type: integer
        title:
          type: string
        author:
          type: string
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
    Note:
      properties:
        noteId:
          type: integer
        bookId:
          type: integer
        note:
          type: string
        
    Books:
      type: array
      items:
         $ref: '#/components/schemas/Book'
  